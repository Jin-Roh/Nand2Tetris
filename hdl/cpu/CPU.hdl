// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

     // choose input for register A
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=muxA);

    // A register controll
    Not(in=instruction[15], out=ni);
    Not(in=instruction[12], out=na);

    And(a=na, b=instruction[5], out=la1);
    Or(a=ni, b=la1, out=la);

    // load A
    Register(in=muxA, load=la, out=A);

    // load D
    And(a=instruction[15], b=instruction[4], out=ld);
    Register(in=ALUout, load=ld, out=D);    


    // select inM or A
    Mux16(a=A, b=inM, sel=instruction[12], out=muxALU);

    // ALU execute
    ALU(x=D, y=muxALU, zx = instruction[11],
                       nx = instruction[10],
                       zy = instruction[9],
                       ny = instruction[8],
                       f  = instruction[7],
                       no = instruction[6], zr=zro, ng=ngo, out=ALUout, out=outM);

    // out CPU
    And16(a=A,             b=true,           out[0..14]=addressM);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // needed for calculation of the load pc param
    Not(in=zro,  out=notzr);
    Not(in=ngo,  out=notng);

    // calculation of jump params
    And(a=notzr, b=ngo,   out=LT);
    And(a=notzr, b=notng, out=GT);
    Or(a=zro,    b=ngo,   out=LE);

    // set first load
    Mux4Way16(a[0]=false, b[0]=GT,    c[0]=zro, d[0]=notng, sel=instruction[0..1], out[0]=lpca);
    Mux4Way16(a[0]=LT,    b[0]=notzr, c[0]=LE , d[0]=true,  sel=instruction[0..1], out[0]=lpcb);

    // load pc
    Mux(a=lpca, b=lpcb, sel=instruction[2], out=lpc);

    // jump instruction?
    And(a=lpc, b=instruction[15], out=jump);

    // program counter, points to addr of next instruction
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}

